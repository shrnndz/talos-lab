apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: http
      name: http
  selector:
    app: keycloak
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: keycloak
  name: keycloak-discovery
  namespace: keycloak
spec:
  selector:
    app: keycloak
  clusterIP: None
  type: ClusterIP

---
apiVersion: apps/v1
# Use a stateful setup to ensure that for a rolling update Pods are restarted with a rolling strategy one-by-one.
# This prevents losing in-memory information stored redundantly in two Pods.
kind: StatefulSet
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  serviceName: keycloak-discovery
  # Run with one replica to save resources, or with two replicas to allow for rolling updates for configuration changes
  replicas: 2
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:26.3.3
          args: ["start"]
          env:
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              value: "admin"
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              value: "admin"
            - name: KC_PROXY_HEADERS
              value: "xforwarded"
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: KC_HOSTNAME_STRICT
              value: "true"
            - name: KC_HOSTNAME
              value: "https://auth.hernanfam.com"
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: KC_HOSTNAME_BACKCHANNEL_DYNAMIC
              value: "true"
            - name: "KC_CACHE"
              value: "ispn"
            # Passing the Pod's IP primary address to the JGroups clustering as this is required in IPv6 only setups
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            # Instruct JGroups which DNS hostname to use to discover other Keycloak nodes
            # Needs to be unique for each Keycloak cluster
            - name: JAVA_OPTS_APPEND
              value: "-Djgroups.bind.address=$(POD_IP)"
            - name: "KC_DB_URL_DATABASE"
              value: "keycloak"
            - name: "KC_DB_URL_HOST"
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: dbUrl
            - name: "KC_DB"
              value: "postgres"
            # In a production environment, use a secret to store username and password to the database
            - name: "KC_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: dbPassword
            - name: "KC_DB_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: dbUsername
          ports:
            - name: http
              containerPort: 8080
          startupProbe:
            httpGet:
              path: /health/started
              port: 9000
            periodSeconds: 1
            failureThreshold: 600
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 9000
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health/live
              port: 9000
            periodSeconds: 10
            failureThreshold: 3
          resources:
            limits:
              cpu: 2000m
              memory: 2000Mi
            requests:
              cpu: 500m
              memory: 1700Mi
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/target: tint.hernanfam.com
  name: keycloak
  namespace: keycloak
spec:
  routes:
    - kind: Rule
      match: Host(`auth.hernanfam.com`)
      services:
        - kind: Service
          name: keycloak
          port: 8080
  tls:
    secretName: keycloak-tls

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: keycloak-tls
  namespace: keycloak
spec:
  dnsNames:
    - auth.hernanfam.com
  issuerRef:
    kind: ClusterIssuer
    name: cloudflare-issuer
  secretName: keycloak-tls
